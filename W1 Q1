class Graph:

    def __init__(self):
        self.nodes = {}

    #the add_member() adds a new item to the nodes dictionary
    #the key is the node and the value is un empty list that represents the neighbors
    def add_member(self, node):
        if node not in self.nodes:
            self.nodes[node]=[]

    #the add_relationship() takes two nodes and connects between them
    def add_relationship(self, node1, node2):
        if data1 in self.nodes and data2 in self.nodes:
            self.nodes[data1].append(data2)
            self.nodes[data2].append(data1)

    #the find_friends() takes a node and returns a list of all the neighbors
    def find_friends(self, node):
        if node in self.nodes:
            return self.nodes[node]

    def shortest_path(self,node1,node2):
        
        if node1 not in self.nodes or node2 not in self.nodes:
            return -1

        node1_neighbors_with_depth=[node1]
        node2_neighbors_with_depth=[node2]

        trash=[]

        depth=0
        turn=True

        while (len(node1_neighbors_with_depth) !=0 and len(node2_neighbors_with_depth) !=0):
            if self.intersection_check(node1_neighbors_with_depth,node2_neighbors_with_depth):
                return depth

            if turn:
                node1_neighbors_with_depth=self.next_depth(node1_neighbors_with_depth,trash)
                turn=False
            else:
                node2_neighbors_with_depth=self.next_depth(node2_neighbors_with_depth,trash)
                turn=True

            depth+=1
            
        return -1

    def intersection_check(self,nodes1,nodes2):
        for node1 in nodes1:
            for node2 in nodes2:
                if node1 == node2:
                    return True
        return False

    def next_depth(self,old_neighbors,trash):
        new_neighbors=[]

        for neighbor in old_neighbors:
            for neighbor_neighbor in self.nodes[neighbor]:
                if neighbor_neighbor not in trash:
                    new_neighbors.append(neighbor_neighbor)
            if neighbor not in trash:
                trash.append(neighbor)

        return new_neighbors

