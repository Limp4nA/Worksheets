class Graph:
    def __init__(self):
        self.nodes = {}

    def add_member(self, data):
        if data not in self.nodes:
            self.nodes[data]=[]

    def add_relationship(self, data1, data2):
        if data1 in self.nodes and data2 in self.nodes:
            self.nodes[data1].append(data2)
            self.nodes[data2].append(data1)

    def find_friends(self, node):
        if node in self.nodes:
            return self.nodes[node]

    def shortest_path(self,start,goal,visited=[],steps=0):

        if start == goal:
            return steps

        min = len(self.nodes)

        there_is_away=False

        visited.append(start)

        for neighbor in self.nodes[start]:

            if neighbor not in visited:

                there_is_away=True
                neighbor_shortest_path=self.shortest_path(neighbor,goal,visited.copy(),steps+1)

                if neighbor_shortest_path != -1 and min> neighbor_shortest_path:
                    min=neighbor_shortest_path

        if not there_is_away:
            return -1

        return min
