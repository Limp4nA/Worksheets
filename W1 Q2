class Queue:

    def __init__(self):
        self.list = []

    def put(self, data):
        self.list.append(data)

    def get(self):
        if len(self.list) > 0:
            data = self.list[0]
            del self.list[0]
            return data

class Graph:
    def __init__(self):
        self.vertices = {}
        self.ajd_matrix=None

    def add_vertex(self, data):
        if data not in self.vertices:
            self.vertices[data]=[]

    def del_vertex(self,data):
        if data in self.vertices:
            del self.vertices[data]

    def remove_edge(self, from_vertex, to_vertex):
        if from_vertex in self.vertices and to_vertex in self.vertices:
            for i in range(len(self.vertices[from_vertex])):
                if self.vertices[from_vertex][i] == to_vertex:
                    del self.vertices[from_vertex][i]
                    break
            for i in range(len(self.vertices[to_vertex])):
                if self.vertices[to_vertex][i] == from_vertex:
                    del self.vertices[to_vertex][i]
                    break
    def add_edge(self, data1, data2):
        if data1 in self.vertices and data2 in self.vertices:
            self.vertices[data1].append(data2)
            self.vertices[data2].append(data1)

    def update_matrix(self):

        self.ajd_matrix=[]

        for node in self.vertices:

            node_ajds=[]

            for other_node in self.vertices:

                if other_node in self.vertices[node]:
                    node_ajds.append(1)
                else:
                    node_ajds.append(".")


            self.ajd_matrix.append(node_ajds)

    def print_matrix(self):

        self.update_matrix()
        result=' |'

        # line="\n"+("-"*(2+len(self.ajd_matrix)*2))+"\n"
        line='\n'
        for key in self.vertices:
            result+=f"{key}|"

        result+=line

        keys=list(self.vertices.keys())

        for row in range(len(self.ajd_matrix)):
            result+=f"{keys[row]}|"

            for col in range(len(self.ajd_matrix[row])):

                result+=f"{self.ajd_matrix[row][col]}|"

            result+=line

        return result

def is_network_connected(graph):

    visited=[]
    qu=Queue()

    node=list(graph.vertices.keys())[0]


    while len(qu.list)!=0 or len(visited)==0:

        visited.append(node)

        for neighbor in graph.vertices[node]:
            if neighbor not in visited and neighbor not in qu.list:
                qu.put(neighbor)

        node=qu.get()

    visited.append(node)

    return len(visited) == len(graph.vertices)


g=Graph()

g.add_vertex("A");g.add_vertex("B");g.add_vertex("C");g.add_vertex("D");g.add_vertex("E");g.add_vertex("F");g.add_vertex("G")
g.add_vertex("H");g.add_vertex("I");g.add_vertex("J");g.add_vertex("K");g.add_vertex("L");g.add_vertex("M");g.add_vertex("N")

g.add_edge("A", "B");g.add_edge("A", "C");g.add_edge('B', 'D');g.add_edge('B', 'F');g.add_edge('C', 'D');g.add_edge('C', 'E')
g.add_edge('C', 'I');g.add_edge('D', 'G');g.add_edge('E', 'G');g.add_edge('F', 'J');g.add_edge('G', 'H');g.add_edge('G', 'J')
g.add_edge('H', 'I');g.add_edge('H', 'M');g.add_edge('I', 'K');g.add_edge('K', 'L');g.add_edge('K', 'M');g.add_edge('M', 'N')

star=Graph()#Star network

star.add_vertex("A");star.add_vertex("B");star.add_vertex("C");star.add_vertex("D");star.add_vertex("E");star.add_vertex("F");
star.add_edge("A", "B");star.add_edge("A", "C");star.add_edge("A", "D");star.add_edge("A", "E");star.add_edge("A", "F")

print("Star network:")
print(f"is network connected: {is_network_connected(star)}")
print(star.print_matrix())

ring=Graph()#ring network

ring.add_vertex("A");ring.add_vertex("B");ring.add_vertex("C");ring.add_vertex("D");ring.add_vertex("E");ring.add_vertex("F")
ring.add_edge("A", "B");ring.add_edge("B", "C");ring.add_edge("C", "D");ring.add_edge("D", "E");ring.add_edge("E", "F");ring.add_edge("F", "A")

print("Ring network:")
print(f"is network connected: {is_network_connected(ring)}")
print(ring.print_matrix())
