import queue
class Graph:

    def __init__(self):
        self.nodes = {}

        #shortest is a variable that keeps track on the shortest steps from two specific nodes
        self.shortest = -1

    def add_member(self, node):
        if node not in self.nodes:
            self.nodes[node] = []

    def add_relationship(self, node1, node2):
        if node1 in self.nodes and node2 in self.nodes:
            self.nodes[node1].append(node2)
            self.nodes[node2].append(node1)

    #shortest_steps() asks for two nodes and return the minimum amount of steps as an integer
    #note: shortest_steps is the shortest_path() in week 15 sheet 1 Q1
    #intersection_check() and next_depth() are also brought back from the same worksheet
    def shortest_steps(self, node1, node2):

        if node1 not in self.nodes or node2 not in self.nodes:
            return -1

        node1_neighbors_with_depth = [node1]
        node2_neighbors_with_depth = [node2]

        trash = []

        depth = 0

        turn = True

        while (len(node1_neighbors_with_depth) != 0 and len(node2_neighbors_with_depth) != 0):

            if self.intersection_check(node1_neighbors_with_depth, node2_neighbors_with_depth):
                return depth

            if turn:
                node1_neighbors_with_depth = self.next_depth(node1_neighbors_with_depth, trash)

                turn = False

            else:
                node2_neighbors_with_depth = self.next_depth(node2_neighbors_with_depth, trash)

                turn = True

            depth += 1

        return -1

    def intersection_check(self, node1_neighbors, node2_neighbors):
        for node1_neighbor in node1_neighbors:
            for node2_neighbor in node2_neighbors:
                if node1_neighbor == node2_neighbor:
                    return True
        return False

    def next_depth(self, old_neighbors, trash):

        new_neighbors = []

        for neighbor in old_neighbors:

            for neighbor_neighbor in self.nodes[neighbor]:

                if neighbor_neighbor not in trash:
                    new_neighbors.append(neighbor_neighbor)

            if neighbor not in trash:
                trash.append(neighbor)

        return new_neighbors

    # the shortest_path() method returns a list of the shortest path
    def shortest_path(self, start, goal, visited=[], steps=0,shortest=None):

        if shortest is None:
            shortest = self.shortest_steps(start, goal)
            self.shortest=shortest
            if shortest == -1:
                return []

        visited.append(start)

        if start == goal:
            return visited

        if steps >= shortest:
            return []

        for neighbor in self.nodes[start]:

            if neighbor not in visited:

                neighbor_shortest_path = self.shortest_path(neighbor, goal, visited.copy(), steps + 1,shortest)

                if len(neighbor_shortest_path) > 0:
                    return neighbor_shortest_path

        return []

#note: here is where we do the breadth-first search (BFS) algorithm
# create_graph() asks for two words (start , goal) and a list of all the words
#and it returns a graph, each node has a value of a string, and all of its neighbors are from the find_neighbors() function
def create_graph(start, goal, words):
    graph = Graph()

    visited = []
    q = queue.Queue()
    q.put(start)

    #we traverse through the words in the BFS way
    while q.qsize() > 0:

        current = q.get()
        graph.add_member(current)
        current_neighbors = find_neighbors(current, words)
        visited.append(current)

        for neighbor in current_neighbors:

            if neighbor not in list(q.queue) and neighbor not in visited:
                if neighbor == goal:
                    graph.add_member(neighbor)
                    graph.add_relationship(current, goal)
                    return graph

                q.put(neighbor)

            graph.add_member(neighbor)
            graph.add_relationship(current, neighbor)

    return graph

# the word_ladder() asks for two words (start, goal) and a list of all the words
# it prints the word ladder starting at 'start' to 'goal'
def word_ladder(start, goal, words):
    # we create the graph
    graph = create_graph(start, goal, words)

    # we send a message to know that the graph has finished because sometimes the graph can take a long time to generate
    print("\n------------------------")
    print("-----(graph finish)-----")
    print("------------------------")

    # ladder is a list of the shortest path from start to goal
    ladder = graph.shortest_path(start, goal)

    print()

    # we print the shortest steps and the ladder
    print(f"{graph.shortest} steps:")

    for i in range(len(ladder) - 1):
        print(f'{ladder[i]} -> ', end='')
    print(ladder[-1])

def find_neighbors(word, words):
    neighbors = [] # An empty list to store neighbors.
    for w in words: 
         if len(word) == len(w):
            similarity = 0
            for litter in range(len(word)):
                if w[litter] is word[litter]:
                     similarity += 1
            if similarity == len(word) - 1:  # If the similarity is equal to the length of the word minus one words differ by exactly one letter.
                neighbors.append(w)
    return neighbors

start_word = str(input("Enter the start word please: ")).lower()
goal_word = str(input("Enter the end word please: ")).lower()

with open("words_alpha.txt", "r") as words_file:
    all_words = words_file.read()
    all_words = all_words.split("\n")

targeted_words=[]
for i in range(len(all_words)):
    if len(all_words[i]) == len(start_word):
        targeted_words.append(all_words[i])

word_ladder(start_word, goal_word, targeted_words)
